name: Nosetests and Valgrind

on:
  schedule:
    - cron: '0 16 * * *'  # Daily at UTC 16:00

jobs:
  iftest:
    runs-on: [self-hosted, linux]
    outputs:
      should_run: ${{ steps.store_output.outputs.SHOULD_RUN }}
    steps:
    - name: Store output
      id: store_output
      env:
        SHA_LAST_SUCCESS: ${{ secrets.SHA_LAST_SUCCESS }}
      run: |
        if [ "$SHA_LAST_SUCCESS" == "${{ github.sha }}" ]; then
          echo "::set-output name=SHOULD_RUN::0"
        else
          echo "::set-output name=SHOULD_RUN::1"
        fi

  conclude:
    runs-on: [self-hosted, linux]
    needs: [nose_tests_lvl3, valgrind-wide-and-shallow, valgrind-narrow-and-deep]
    steps:
    - name: Store current SHA as secret
      uses: hmanzur/actions-set-secret@v2.0.0
      with:
        name: 'SHA_LAST_SUCCESS'
        value: ${{ github.sha }}
        repository: AarhusCosmology/CLASSpp
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
    - name: Checkout master ðŸ›Ž
      uses: actions/checkout@v2
      with:
        path: main_class
        ref: master
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
    - name: Push to public master
      env:
        TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        cd main_class
        git push https://AarhusCosmology:"$TOKEN"@github.com/AarhusCosmology/CLASSpp_public master:master

  nose_tests_lvl3:
    runs-on: [self-hosted, linux, heavy]
    needs: iftest
    if: needs.iftest.outputs.should_run > 0
    steps:
    - name: Checkout ðŸ›Ž
      uses: actions/checkout@v2
      with:
        path: main_class
    - name: Create virtual Python environment
      run: rm -rf venv && virtualenv venv --system-site-packages
    - name: make
      run: cd main_class && make -j
    - name: Testing ðŸ¤–
      run: |
        source venv/bin/activate
        cd main_class/python
        COMPARE_OUTPUT_GAUGE=1 TEST_LEVEL=3 nosetests -v -a test_scenario test_class.py
    - name: Upload plots ðŸ“¤
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ComparePlots
        path: main_class/python/faulty_figs
    - name: Remove virtual Python environment
      if: success() || failure()
      run: rm -rf venv

  valgrind-wide-and-shallow:
    runs-on: [self-hosted, linux, heavy]
    needs: iftest
    if: needs.iftest.outputs.should_run > 0
    timeout-minutes: 1440
    steps:
    - name: Checkout ðŸ›Ž
      uses: actions/checkout@v2
      with:
        path: main_class
    - name: Create virtual Python environment
      run: rm -rf venv && virtualenv venv --system-site-packages
    - name: make
      run: cd main_class && make -j
    - name: Generate input files
      run: |
        source venv/bin/activate
        cd main_class/python
        TEST_LEVEL=3 CLASS_VERBOSE=1 nosetests -a dump_ini_files test_class.py
    - name: Remove virtual Python environment
      if: success() || failure()
      run: rm -rf venv
    - name: Valgrind ðŸ¤–
      run: |
        cd main_class/python/faulty_figs
        rm -rf output && mkdir output
        rm -rf valgrind_output && mkdir valgrind_output
        cp ../../class .
        find . -name "*.ini" -type f -print0 | xargs -0 -I {} -n 1 -P 6 bash -c ': \
          && printf "\nk_step_sub = 10.0\nk_step_super = 0.4\nk_per_decade_for_pk = 2\nk_per_decade_for_bao = 5\n" >> {}'
        find . -name "*.ini" -type f -print0 | xargs -0 -I {} -n 1 -P 6 bash -c ': \
          && (valgrind --leak-check=full --error-exitcode=3 ./class {} &> {}.out && echo {} "...ok") \
          || (echo {} "...fail" && cp {}* valgrind_output && exit 3)'
    - name: Upload errors ðŸ“¤
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ValgrindOutputWideShallow
        path: main_class/python/faulty_figs/valgrind_output

  valgrind-narrow-and-deep:
    runs-on: [self-hosted, linux, heavy]
    needs: iftest
    if: needs.iftest.outputs.should_run > 0
    timeout-minutes: 1440
    steps:
    - name: Checkout ðŸ›Ž
      uses: actions/checkout@v2
      with:
        path: main_class
    - name: Create virtual Python environment
      run: rm -rf venv && virtualenv venv --system-site-packages
    - name: make
      run: cd main_class && make -j
    - name: Generate input files
      run: |
        source venv/bin/activate
        cd main_class/python
        TEST_LEVEL=1 CLASS_VERBOSE=1 nosetests -a dump_ini_files test_class.py
    - name: Remove virtual Python environment
      if: success() || failure()
      run: rm -rf venv
    - name: Valgrind ðŸ¤–
      run: |
        cd main_class/python/faulty_figs
        rm -rf output && mkdir output
        rm -rf valgrind_output && mkdir valgrind_output
        cp ../../class .
        find . -name "*.ini" -type f -print0 | xargs -0 -I {} -n 1 -P 6 bash -c ': \
          && (valgrind --leak-check=full --error-exitcode=3 ./class {} &> {}.out && echo {} "...ok") \
          || (echo {} "...fail" && cp {}* valgrind_output && exit 3)'
    - name: Upload errors ðŸ“¤
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ValgrindOutputNarrowDeep
        path: main_class/python/faulty_figs/valgrind_output
